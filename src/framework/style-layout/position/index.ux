<template>
    <div class="demo-page">
        <div class="title-container">
            <text class="title">relative/absolute/fixed 定位</text>
        </div>
        <div class="select-container">
            <label class="small-title">指定position属性值：</label>
            <select class="position-select" onchange="onSelectChanged">
                <option value="relative" selected="selected" class="position-select">relative</option>
                <option value="absolute" class="position-select">absolute</option>
                <option value="fixed" class="position-select">fixed</option>
            </select>
        </div>
        <div class="title-container">
            <text class="title">偏移参数</text>
        </div>
        <text class="description-without-margin">勾选边距方向与拖动滑块决定边距距离</text>
        <div class="slider-container">
            <label class="small-title offset-label">{{offsetPrefix}}top: {{top}}</label>
            <input type="checkbox" checked="{{topCheckFlag}}" class="position-checkbox"
                   onchange="getCheckValue('topCheckFlag')"/>
            <slider class="slider" min="0" max="100" value="{{top}}" step="{{step}}"
                    onchange="getSliderValue('top')"></slider>
        </div>
        <div class="slider-container">
            <label class="small-title offset-label">{{offsetPrefix}}left: {{left}}</label>
            <input type="checkbox" checked="{{leftCheckFlag}}" class="position-checkbox"
                   onchange="getCheckValue('leftCheckFlag')"/>
            <slider class="slider" min="0" max="100" value="{{left}}" step="{{step}}"
                    onchange="getSliderValue('left')"></slider>
        </div>
        <div class="slider-container">
            <label class="small-title offset-label">{{offsetPrefix}}right: {{right}}</label>
            <input type="checkbox" checked="{{rightCheckFlag}}" class="position-checkbox"
                   onchange="getCheckValue('rightCheckFlag')"/>
            <slider class="slider" min="0" max="100" value="{{right}}" step="{{step}}"
                    onchange="getSliderValue('right')"></slider>
        </div>
        <div class="slider-container">
            <label class="small-title offset-label">{{offsetPrefix}}bottom: {{bottom}}</label>
            <input type="checkbox" checked="{{bottomCheckFlag}}" class="position-checkbox"
                   onchange="getCheckValue('bottomCheckFlag')"/>
            <slider class="slider" min="0" max="100" value="{{bottom}}" step="{{step}}"
                    onchange="getSliderValue('bottom')"></slider>
        </div>
        <div class="slider-container">
            <label class="small-title offset-label">width: {{width}}</label>
            <slider class="slider" min="100" max="300" value="{{width}}" step="{{step}}"
                    onchange="getSliderValue('width')"></slider>
        </div>
        <div class="slider-container">
            <label class="small-title offset-label">height: {{height}}</label>
            <slider class="slider" min="100" max="300" value="{{height}}" step="{{step}}"
                    onchange="getSliderValue('height')"></slider>
        </div>
        <text class="description">{{getStyleText}}</text>
        <div class="reset-button" onclick="resetState">
            <Text class="reset-text">Reset</Text>
        </div>
        <div class="box-container">
            <div class="square-container-black"></div>
            <div class="square-container"
                 style="{{getStyleText}}"></div>
        </div>
    </div>
</template>

<script>
    export default {
        // 页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖
        private: {
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            width: 100,
            height: 100,
            position: 'relative',
            offsetPrefix: 'margin-',
            topCheckFlag: false,
            leftCheckFlag: false,
            rightCheckFlag: false,
            bottomCheckFlag: false
        },
        computed: {
            getStyleText() {
                let {top, left, right, bottom, position = 'relative', topCheckFlag, leftCheckFlag, rightCheckFlag, bottomCheckFlag, width = 100, height = 100} = this;
                let styleText = `position:${position};`;

                let addStyleOffset = (offsetDirection, offsetNumber, positionAttribute, enableFlag = false) => {
                    if (!offsetDirection) return
                    const relativeFlag = positionAttribute === 'relative'
                    let newStringTextPrefix = relativeFlag ? 'margin-' : ''
                    let oppositeStringTextPrefix = relativeFlag ? '' : 'margin-';
                    styleText += `${oppositeStringTextPrefix}${offsetDirection}:0;`
                    if (!enableFlag) {
                        offsetNumber = 0
                    } else {
                        offsetNumber += 'px'
                    }
                    styleText += `${newStringTextPrefix}${offsetDirection}:${offsetNumber};`
                };

                let addStyleLength = (lengthName, lengthNumber) => {
                    styleText += `${lengthName}:${lengthNumber}px;`
                };
                addStyleOffset('top', top, position, topCheckFlag);
                addStyleOffset('left', left, position, leftCheckFlag);
                addStyleOffset('right', right, position, rightCheckFlag);
                addStyleOffset('bottom', bottom, position, bottomCheckFlag);
                addStyleLength('width', width);
                addStyleLength('height', height);
                return styleText
            }
        },
        onSelectChanged(e) {
            let newPosition = e.newValue;
            this.position = newPosition;
            this.offsetPrefix = newPosition === 'relative' ? 'margin-' : '';
        },
        getSliderValue(name, e) {
            this[name] = e.progress
        },
        getCheckValue(name, e) {
            this[name] = e.checked
        },
        resetState() {
            this.top = 0;
            this.left = 0;
            this.right = 0;
            this.bottom = 0;
            this.width = 100;
            this.height = 100;
            this.topCheckFlag = false;
            this.leftCheckFlag = false;
            this.rightCheckFlag = false;
            this.bottomCheckFlag = false;
        }
    }
</script>

<style>
    .demo-page {
        flex-direction: column;
        margin: 24px;
    }

    .title-container {
        height: 72px;
        flex-direction: row;
        align-items: center;
        border-radius: 4px;
        padding: 0 24px;
        margin-bottom: 12px;
        background-color: #eee;
    }

    .title {
        font-size: 36px;
        color: #242424;
    }

    .small-title {
        font-size: 36px;
        margin-right: 40px;
    }


    .position-select {
        font-size: 36px;
        padding: 8px;
        width: 300px;
    }

    .select-container {
        position: relative;
        padding: 0;
        margin-bottom: 12px;
        flex-direction: row;
        align-items: center;
        justify-content: space-between;
    }

    .box-container {
        width: 600px;
        height: 600px;
        margin: 12px 51px;
        border-width: 2px;
        border-color: #242424;
    }

    .square-container {
        background-color: #4c9afa;
    }

    .square-container-black {
        width: 100px;
        height: 100px;
        background-color: #242424;
        border-color: #242424;
    }

    .slider {
        width: 300px;
        margin-left: 16px;
    }

    .slider-container {
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
        height: 60px;
        margin-bottom: 12px;
    }

    .offset-label {
        width: 370px;
    }

    .position-checkbox {
        width: 60px;
    }

    .description {
        font-size: 36px;
        color: #ccc;
        width: 700px;
        margin-bottom: 24px;
    }

    .description-without-margin {
        font-size: 36px;
        color: #ccc;
        width: 700px;
    }

    .reset-button {
        position: fixed;
        z-index: 9999;
        width: 120px;
        height: 120px;
        border-radius: 60px;
        right: 40px;
        bottom: 80px;
        background-color: #F44336;
        align-items: center;
        justify-content: center;
    }

    .reset-button:active {
        opacity: 0.5;
    }

    .reset-text {
        font-size: 36px;
        color: #fff;
        text-align: center;
    }
</style>

